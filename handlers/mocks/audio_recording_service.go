package mocks

import (
	"github.com/stretchr/testify/mock"
	"kitadoc-backend/models"
)

// AudioRecordingService is an autogenerated mock type for the AudioRecordingService type
type AudioRecordingService struct {
	mock.Mock
}

// UploadAudioRecording provides a mock function with given fields: recording, fileContent
func (_m *AudioRecordingService) UploadAudioRecording(recording *models.AudioRecording, fileContent []byte) (*models.AudioRecording, error) {
	ret := _m.Called(recording, fileContent)

	var r0 *models.AudioRecording
	if rf, ok := ret.Get(0).(func(*models.AudioRecording, []byte) *models.AudioRecording); ok {
		r0 = rf(recording, fileContent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AudioRecording)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.AudioRecording, []byte) error); ok {
		r1 = rf(recording, fileContent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAudioRecordingByID provides a mock function with given fields: id
func (_m *AudioRecordingService) GetAudioRecordingByID(id int) (*models.AudioRecording, error) {
	ret := _m.Called(id)

	var r0 *models.AudioRecording
	if rf, ok := ret.Get(0).(func(int) *models.AudioRecording); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AudioRecording)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAudioRecording provides a mock function with given fields: id
func (_m *AudioRecordingService) DeleteAudioRecording(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
