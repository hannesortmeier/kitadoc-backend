package mocks

import (
	"context"
	"kitadoc-backend/models"

	"github.com/sirupsen/logrus"
	"github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// RegisterUser provides a mock function with given fields: logger, username, password, role
func (_m *UserService) RegisterUser(logger *logrus.Entry, username string, password string, role string) (*models.User, error) {
	ret := _m.Called(logger, username, password, role)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(*logrus.Entry, string, string, string) *models.User); ok {
		r0 = rf(logger, username, password, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*logrus.Entry, string, string, string) error); ok {
		r1 = rf(logger, username, password, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: logger, username, password
func (_m *UserService) LoginUser(logger *logrus.Entry, username string, password string) (string, error) {
	ret := _m.Called(logger, username, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(*logrus.Entry, string, string) string); ok {
		r0 = rf(logger, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*logrus.Entry, string, string) error); ok {
		r1 = rf(logger, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentUser provides a mock function with given fields: logger, tokenString
func (_m *UserService) GetCurrentUser(logger *logrus.Entry, tokenString string) (*models.User, error) {
	ret := _m.Called(logger, tokenString)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(*logrus.Entry, string) *models.User); ok {
		r0 = rf(logger, tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*logrus.Entry, string) error); ok {
		r1 = rf(logger, tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: logger, ctx, userID
func (_m *UserService) GetUserByID(logger *logrus.Entry, ctx context.Context, userID int) (*models.User, error) {
	ret := _m.Called(logger, ctx, userID)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(*logrus.Entry, context.Context, int) *models.User); ok {
		r0 = rf(logger, ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*logrus.Entry, context.Context, int) error); ok {
		r1 = rf(logger, ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: logger, userModel
func (_m *UserService) UpdateUser(logger *logrus.Entry, userModel *models.User) error {
	ret := _m.Called(logger, userModel)

	var r0 error
	if rf, ok := ret.Get(0).(func(*logrus.Entry, *models.User) error); ok {
		r0 = rf(logger, userModel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: logger, userID
func (_m *UserService) DeleteUser(logger *logrus.Entry, userID int) error {
	ret := _m.Called(logger, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*logrus.Entry, int) error); ok {
		r0 = rf(logger, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields: logger
func (_m *UserService) GetAllUsers(logger *logrus.Entry) ([]*models.User, error) {
	ret := _m.Called(logger)

	var r0 []*models.User
	if rf, ok := ret.Get(0).(func(*logrus.Entry) []*models.User); ok {
		r0 = rf(logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*logrus.Entry) error); ok {
		r1 = rf(logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangePassword provides a mock function with given fields: logger, actor, userID, oldPassword, newPassword
func (_m *UserService) ChangePassword(logger *logrus.Entry, actor *models.User, userID int, oldPassword string, newPassword string) error {
	ret := _m.Called(logger, actor, userID, oldPassword, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(*logrus.Entry, *models.User, int, string, string) error); ok {
		r0 = rf(logger, actor, userID, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
