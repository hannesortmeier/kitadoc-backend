package mocks

import (
	"kitadoc-backend/models"
	"github.com/stretchr/testify/mock"
)

// AssignmentService is an autogenerated mock type for the AssignmentService type
type AssignmentService struct {
	mock.Mock
}

// GetAssignmentByID provides a mock function with given fields: id
func (_m *AssignmentService) GetAssignmentByID(id int) (*models.Assignment, error) {
	ret := _m.Called(id)

	var r0 *models.Assignment
	if rf, ok := ret.Get(0).(func(int) *models.Assignment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Assignment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAssignment provides a mock function with given fields: assignment
func (_m *AssignmentService) CreateAssignment(assignment *models.Assignment) (*models.Assignment, error) {
	ret := _m.Called(assignment)

	var r0 *models.Assignment
	if rf, ok := ret.Get(0).(func(*models.Assignment) *models.Assignment); ok {
		r0 = rf(assignment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Assignment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Assignment) error); ok {
		r1 = rf(assignment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAssignment provides a mock function with given fields: id
func (_m *AssignmentService) DeleteAssignment(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAssignmentHistoryForChild provides a mock function with given fields: childID
func (_m *AssignmentService) GetAssignmentHistoryForChild(childID int) ([]models.Assignment, error) {
	ret := _m.Called(childID)

	var r0 []models.Assignment
	if rf, ok := ret.Get(0).(func(int) []models.Assignment); ok {
		r0 = rf(childID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Assignment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(childID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAssignment provides a mock function with given fields: assignment
func (_m *AssignmentService) UpdateAssignment(assignment *models.Assignment) error {
	ret := _m.Called(assignment)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Assignment) error); ok {
		r0 = rf(assignment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}